{"version":3,"sources":["static/other.jpg","static/writing.jpg","static/fitness.jpg","static/cooking.jpg","static/code.jpg","static/piano.jpg","static/timespendother.jpg","static/school.jpg","static/screentime.jpg","static/sleep.jpg","static/transit.jpg","static/work.jpg","components/display/MinymalTheme.js","components/display/Collapse.js","components/screens/Header.js","components/screens/Intro.js","components/display/CardOptionsDisplay.js","components/logic/CardOptions.js","components/screens/GoalsCardQuestion.js","components/display/ConfirmOptionsDisplay.js","components/logic/ConfirmOptions.js","components/screens/GoalsConfirmQuestion.js","components/screens/TimeSpendCardQuestion.js","components/screens/TimeSpendConfirmQuestion.js","components/screens/Questionnaire.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","typography","fontFamily","MinymalTheme","props","ThemeProvider","children","Collapse","in","condition","timeout","mountOnEnter","unmountOnExit","Header","Container","Typography","variant","withStyles","button","marginTop","classes","Button","onClick","setQuestion","color","className","root","display","flexDirection","justifyContent","height","image","width","objectFit","grid","flex","marginBottom","fullContainer","fillContainer","overlay","position","top","bottom","left","right","backgroundColor","padding","checkOverlay","card","cursor","wrapper","question","Grid","spacing","container","imagePaths","map","i","key","imageTitles","item","xs","Card","CardActionArea","CardMedia","title","Slide","selected","includes","enter","exit","manageSelection","onSubmit","size","CardOptions","cardIndex","state","newState","index","indexOf","splice","setState","goalsList","sort","a","b","x","otherText","length","otherIndex","submitSelection","nextScreen","this","Component","Piano","Code","Cooking","Fitness","Writing","Other","GoalsCardQuestion","setGoals","gridItem","heading","input","icon","subtitle","options","goal","TextField","id","label","value","onChange","e","IconButton","removeField","maxFields","style","addField","ConfirmOptions","target","goalList","filter","fieldIndex","GoalsConfirmQuestion","goals","Sleep","Work","School","Transit","ScreenTime","TimeSpendOther","TimeSpendCardQuestion","setTimeSpenders","TimeSpendConfirmQuestion","timeSpenders","App","questionName","timespenders","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.480a990a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/other.02b8ad79.jpg\";","module.exports = __webpack_public_path__ + \"static/media/writing.b0259502.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fitness.01240d89.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cooking.0307f8bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/code.225bfbf3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/piano.a8f9a282.jpg\";","module.exports = __webpack_public_path__ + \"static/media/timespendother.b68b9ad7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/school.f383f426.jpg\";","module.exports = __webpack_public_path__ + \"static/media/screentime.b9e6e2d2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sleep.1ac7585c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/transit.a3fc2abd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/work.4a3d49b9.jpg\";","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: '\"Playfair Display\", \"Helvetica\", \"Arial\", sans-serif'\n    }\n});\n\nfunction MinymalTheme(props) {\n    return (\n        <ThemeProvider theme={theme}>\n            {props.children}\n        </ThemeProvider>\n    );\n}\n\nMinymalTheme.propTypes = {\n    children: PropTypes.node\n};\n\nexport default MinymalTheme;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MaterialCollapse from '@material-ui/core/Collapse';\n\nfunction Collapse(props) {\n    return (\n        <MaterialCollapse\n            in={props.condition}\n            timeout={1500}\n            mountOnEnter\n            unmountOnExit\n        >\n            {props.children}\n        </MaterialCollapse>\n    );\n}\n\nCollapse.propTypes = {\n    condition: PropTypes.bool,\n    children: PropTypes.node\n};\n\nexport default Collapse;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nfunction Header() {\n    return (\n        <Container>\n            <Typography variant='h2'>{'Minymal'}</Typography>\n        </Container>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nconst styles = {\n    button: {\n        marginTop: '1rem'\n    }\n};\n\nfunction Intro(props) {\n    const { classes } = props;\n    return (\n        <Container>\n            <Typography variant='body1'>\n                {'Minimalist-minded planning for all goals, small and large.'}\n            </Typography>\n            <Button\n                onClick={() => props.setQuestion('goals')}\n                variant='contained'\n                color='primary'\n                className={classes.button}\n            >\n                {\"Let's Get Started\"}\n            </Button>\n        </Container>\n    );\n}\n\nIntro.propTypes = {\n    setQuestion: PropTypes.func,\n    classes: PropTypes.object\n};\n\nexport default withStyles(styles)(Intro);\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport Slide from '@material-ui/core/Slide';\nimport PropTypes from 'prop-types';\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '75vh',\n        marginTop: '2rem'\n    },\n    image: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n    },\n    grid: {\n        height: '100%',\n        flex: '1',\n        marginTop: '1.5rem',\n        marginBottom: '1.5rem'\n    },\n    fullContainer: {\n        height: '100%'\n    },\n    fillContainer: {\n        flex: '1',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    overlay: {\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n        backgroundColor: 'rgba(0, 0, 0, 0.3)',\n        color: '#FFFFFF',\n        padding: '1rem'\n    },\n    checkOverlay: {\n        width: '100%',\n        height: '100%'\n    },\n    card: {\n        position: 'relative',\n        cursor: 'pointer',\n        height: '100%'\n    },\n    wrapper: {\n        height: '80%'\n    }\n};\n\nfunction CardOptionsDisplay(props) {\n    const { classes } = props;\n    return (\n        <Container className={classes.root}>\n            <Typography variant='h4'>{props.question}</Typography>\n            <Grid\n                spacing={3}\n                container\n                className={classes.grid}\n            >\n                {props.imagePaths.map((image, i) => (\n                    <Grid key={props.imageTitles[i]} item xs={6}>\n                        <Card className={classes.card}>\n                            <CardActionArea\n                                className={classes.fullContainer}\n                            >\n                                <CardMedia\n                                    image={image}\n                                    title={props.imageTitles[i]}\n                                    className={classes.image}\n                                />\n                            </CardActionArea>\n                            <Slide\n                                mountOnEnter\n                                unmountOnExit\n                                in={!props.selected.includes(i)}\n                                timeout={{ enter: 1500, exit: 1500 }}\n                            >\n                                <Container\n                                    className={classes.overlay}\n                                    onClick={() => props.manageSelection(i)}\n                                >\n                                    <Typography variant='h4'>\n                                        <strong>{props.imageTitles[i]}</strong>\n                                    </Typography>\n                                </Container>\n                            </Slide>\n                            <Slide\n                                mountOnEnter\n                                unmountOnExit\n                                in={props.selected.includes(i)}\n                                timeout={1500}\n                            >\n                                <Container\n                                    className={classes.overlay}\n                                    onClick={() => props.manageSelection(i)}\n                                >\n                                    <CheckBoxIcon className={classes.checkOverlay} />\n                                </Container>\n                            </Slide>\n                        </Card>\n                    </Grid>\n                ))}\n            </Grid>\n            <Button\n                onClick={props.onSubmit}\n                className={classes.button}\n                variant='contained'\n                color='primary'\n                size='large'\n            >\n                {'Continue'}\n            </Button>\n        </Container>\n    );\n}\n\nCardOptionsDisplay.propTypes = {\n    question: PropTypes.string,\n    selected: PropTypes.array,\n    imagePaths: PropTypes.array,\n    imageTitles: PropTypes.array,\n    onSubmit: PropTypes.func,\n    manageSelection: PropTypes.func,\n    classes: PropTypes.object\n};\n\nexport default withStyles(styles)(CardOptionsDisplay);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CardOptionsDisplay from '../display/CardOptionsDisplay';\n\nclass CardOptions extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: []\n        };\n    }\n\n    manageSelection = (cardIndex) => {\n        if (!this.state.selected.includes(cardIndex)) {\n            this.setState({ selected: [...this.state.selected, cardIndex] });\n        } else {\n            const newState = [...this.state.selected];\n            const index = newState.indexOf(cardIndex);\n            newState.splice(index, 1);\n            this.setState({ selected: newState });\n        }\n    }\n\n    onSubmit = () => {\n        const sortedIndex = [...this.state.selected].sort((a, b) => a - b);\n        const goalsList = sortedIndex.map((x) => this.props.imageTitles[x]);\n        const otherText = this.props.imageTitles[this.props.imageTitles.length - 1];\n        const otherIndex = goalsList.indexOf(otherText);\n        if (otherIndex !== -1) {\n            goalsList.splice(otherIndex, 1, '');\n        }\n        this.props.submitSelection(goalsList);\n        this.props.setQuestion(this.props.nextScreen);\n    }\n\n    render() {\n        return (\n            <CardOptionsDisplay\n                question={this.props.question}\n                imagePaths={this.props.imagePaths}\n                imageTitles={this.props.imageTitles}\n                onSubmit={this.onSubmit}\n                manageSelection={this.manageSelection}\n                selected={this.state.selected}\n            />\n        );\n    }\n}\n\nCardOptions.propTypes = {\n    imagePaths: PropTypes.array,\n    imageTitles: PropTypes.array,\n    nextScreen: PropTypes.string,\n    question: PropTypes.string,\n    setQuestion: PropTypes.func,\n    submitSelection: PropTypes.func\n};\n\nexport default CardOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Other from '../../static/other.jpg';\nimport Writing from '../../static/writing.jpg';\nimport Fitness from '../../static/fitness.jpg';\nimport Cooking from '../../static/cooking.jpg';\nimport Code from '../../static/code.jpg';\nimport Piano from '../../static/piano.jpg';\nimport CardOptions from '../logic/CardOptions';\n\nconst imagePaths = [Piano, Code, Cooking, Fitness, Writing, Other];\nconst imageTitles = [\n    'Learn an Instrument',\n    'Build an App',\n    'Learn to Cook',\n    'Get Healthier',\n    'Write a Novel',\n    'Other Goals'\n];\n\nfunction GoalsCardQuestion(props) {\n    return (\n        <CardOptions\n            imagePaths={imagePaths}\n            imageTitles={imageTitles}\n            nextScreen={'textgoals'}\n            question={'What are your goals?'}\n            setQuestion={props.setQuestion}\n            submitSelection={props.setGoals}\n        />\n    );\n}\n\nGoalsCardQuestion.propTypes = {\n    setQuestion: PropTypes.func,\n    setGoals: PropTypes.func\n};\n\nexport default GoalsCardQuestion;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport PropTypes from 'prop-types';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nconst styles = {\n    root: {\n        marginTop: '2rem'\n    },\n    grid: {\n        width: '70%'\n    },\n    gridItem: {\n        display: 'flex'\n    },\n    heading: {\n        marginBottom: '1.5rem'\n    },\n    input: {\n        flex: 1\n    },\n    icon: {\n        width: '2rem',\n        height: '100%'\n    },\n    button: {\n        marginTop: '1.5rem'\n    }\n};\n\nfunction ConfirmOptionsDisplay(props) {\n    const { classes } = props;\n    return (\n        <Container className={classes.root}>\n            <Typography variant='h5'>\n                {props.question}\n            </Typography>\n            <Typography className={classes.heading} variant='subtitle1'>\n                {props.subtitle}\n            </Typography>\n            <Grid\n                spacing={3}\n                container\n                className={classes.grid}\n            >\n                {props.options.map((goal, i) => (\n                    <Grid key={i} item xs={6} className={classes.gridItem}>\n                        <TextField\n                            className={classes.input}\n                            id='outlined-basic'\n                            label={`${props.label} ${i + 1}`}\n                            variant='outlined'\n                            value={goal}\n                            onChange={(e) => props.onChange(e, i)}\n                        />\n                        <IconButton onClick={() => props.removeField(i)}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </Grid>\n                ))}\n                {props.options.length < props.maxFields\n                    && <Grid item xs={12}>\n                        <Button\n                            style={{ width: '100%', height: '100%' }}\n                            variant='outlined'\n                            onClick={props.addField}\n                        >\n                            <AddIcon />\n                        </Button>\n                    </Grid>\n                }\n            </Grid>\n            <Button\n                onClick={props.onSubmit}\n                variant='contained'\n                color='primary'\n                size='large'\n                className={classes.button}\n            >\n                {'Continue'}\n            </Button>\n        </Container>\n    );\n}\n\nConfirmOptionsDisplay.propTypes = {\n    question: PropTypes.string,\n    subtitle: PropTypes.string,\n    maxFields: PropTypes.number,\n    label: PropTypes.string,\n    options: PropTypes.array,\n    onChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    addField: PropTypes.func,\n    removeField: PropTypes.func,\n    classes: PropTypes.object\n};\n\nexport default withStyles(styles)(ConfirmOptionsDisplay);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ConfirmOptionsDisplay from '../display/ConfirmOptionsDisplay';\n\nclass ConfirmOptions extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: this.props.options\n        };\n    }\n\n    onChange = (e, index) => {\n        const newState = [...this.state.options];\n        newState.splice(index, 1, e.target.value);\n        this.setState({ options: newState });\n    }\n\n    onSubmit = () => {\n        const goalList = this.state.options.filter((x) => x !== '');\n        this.props.submitSelection(goalList);\n        this.props.setQuestion(this.props.nextScreen);\n    }\n\n    addField = () => {\n        this.setState({ options: [...this.state.options, ''] });\n    }\n\n    removeField = (fieldIndex) => {\n        const newState = [...this.state.options];\n        newState.splice(fieldIndex, 1);\n        this.setState({ options: newState });\n    }\n\n    render() {\n        return (\n            <ConfirmOptionsDisplay\n                question={this.props.question}\n                subtitle={this.props.subtitle}\n                onSubmit={this.onSubmit}\n                onChange={this.onChange}\n                options={this.state.options}\n                addField={this.addField}\n                removeField={this.removeField}\n                label={this.props.label}\n                maxFields={this.props.maxFields}\n            />\n        );\n    }\n}\n\nConfirmOptions.propTypes = {\n    question: PropTypes.string,\n    subtitle: PropTypes.string,\n    label: PropTypes.string,\n    maxFields: PropTypes.number,\n    nextScreen: PropTypes.string,\n    options: PropTypes.array,\n    setQuestion: PropTypes.func,\n    submitSelection: PropTypes.func\n};\n\nexport default ConfirmOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ConfirmOptions from '../logic/ConfirmOptions';\n\nfunction GoalsConfirmQuestion(props) {\n    return (\n        <ConfirmOptions\n            question={\"Are there any other goals you'd like to add?\"}\n            subtitle={\"(If you'd like to edit any existing goals, let's do that too.)\"}\n            nextScreen={'timespenders'}\n            options={props.goals}\n            setQuestion={props.setQuestion}\n            submitSelection={props.setGoals}\n            label={'Goal'}\n            maxFields={6}\n        />\n    );\n}\n\nGoalsConfirmQuestion.propTypes = {\n    goals: PropTypes.array,\n    setQuestion: PropTypes.func,\n    setGoals: PropTypes.func\n};\n\nexport default GoalsConfirmQuestion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TimeSpendOther from '../../static/timespendother.jpg';\nimport School from '../../static/school.jpg';\nimport ScreenTime from '../../static/screentime.jpg';\nimport Sleep from '../../static/sleep.jpg';\nimport Transit from '../../static/transit.jpg';\nimport Work from '../../static/work.jpg';\nimport CardOptions from '../logic/CardOptions';\n\nconst imagePaths = [Sleep, Work, School, Transit, ScreenTime, TimeSpendOther];\nconst imageTitles = [\n    'Sleep',\n    'Work',\n    'School',\n    'Transit',\n    'Screen Time',\n    'Other'\n];\n\nfunction TimeSpendCardQuestion(props) {\n    return (\n        <CardOptions\n            imagePaths={imagePaths}\n            imageTitles={imageTitles}\n            nextScreen={'texttimespenders'}\n            question={'How do you spend most of your time?'}\n            setQuestion={props.setQuestion}\n            submitSelection={props.setTimeSpenders}\n        />\n    );\n}\n\nTimeSpendCardQuestion.propTypes = {\n    setQuestion: PropTypes.func,\n    setTimeSpenders: PropTypes.func\n};\n\nexport default TimeSpendCardQuestion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ConfirmOptions from '../logic/ConfirmOptions';\n\nfunction TimeSpendConfirmQuestion(props) {\n    return (\n        <ConfirmOptions\n            question={\"Are there any other time-spenders you'd like to add?\"}\n            subtitle={\"(If you'd like to edit any existing time-spenders, let's do that too.)\"}\n            nextScreen={'intro'}\n            options={props.timeSpenders}\n            setQuestion={props.setQuestion}\n            submitSelection={props.setTimeSpenders}\n            label={'Time Spender'}\n            maxFields={10}\n        />\n    );\n}\n\nTimeSpendConfirmQuestion.propTypes = {\n    timeSpenders: PropTypes.array,\n    setQuestion: PropTypes.func,\n    setTimeSpenders: PropTypes.func\n};\n\nexport default TimeSpendConfirmQuestion;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Collapse from '../display/Collapse';\nimport Header from './Header';\nimport Intro from './Intro';\nimport GoalsCardQuestion from './GoalsCardQuestion';\nimport GoalsConfirmQuestion from './GoalsConfirmQuestion';\nimport TimeSpendCardQuestion from './TimeSpendCardQuestion';\nimport TimeSpendConfirmQuestion from './TimeSpendConfirmQuestion';\n\nconst styles = {\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%'\n    }\n};\n\nfunction Questionnaire(props) {\n    const { classes } = props;\n    return (\n        <Container className={classes.container}>\n            <Header />\n            <Collapse condition={props.question === 'intro'}>\n                <Intro\n                    setQuestion={props.setQuestion}\n                />\n            </Collapse>\n            <Collapse condition={props.question === 'goals'}>\n                <GoalsCardQuestion\n                    setQuestion={props.setQuestion}\n                    setGoals={props.setGoals}\n                />\n            </Collapse>\n            <Collapse condition={props.question === 'textgoals'}>\n                <GoalsConfirmQuestion\n                    setQuestion={props.setQuestion}\n                    setGoals={props.setGoals}\n                    goals={props.goals}\n                />\n            </Collapse>\n            <Collapse condition={props.question === 'timespenders'}>\n                <TimeSpendCardQuestion\n                    setQuestion={props.setQuestion}\n                    setTimeSpenders={props.setTimeSpenders}\n                />\n            </Collapse>\n            <Collapse condition={props.question === 'texttimespenders'}>\n                <TimeSpendConfirmQuestion\n                    setQuestion={props.setQuestion}\n                    setTimeSpenders={props.setTimeSpenders}\n                    timeSpenders={props.timeSpenders}\n                />\n            </Collapse>\n        </Container>\n    );\n}\n\nQuestionnaire.propTypes = {\n    question: PropTypes.string,\n    goals: PropTypes.array,\n    timeSpenders: PropTypes.array,\n    setQuestion: PropTypes.func,\n    setGoals: PropTypes.func,\n    setTimeSpenders: PropTypes.func,\n    classes: PropTypes.object\n};\n\nexport default withStyles(styles)(Questionnaire);\n","import React, { Component } from 'react';\nimport MinymalTheme from './display/MinymalTheme';\nimport Questionnaire from './screens/Questionnaire';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: 'intro',\n            goals: [],\n            timespenders: []\n        };\n    }\n\n    setQuestion = (questionName) => {\n        this.setState({ question: questionName });\n    }\n\n    setGoals = (goalList) => {\n        this.setState({ goals: goalList });\n    }\n\n    setTimeSpenders = (timeSpenders) => {\n        this.setState({ timespenders: timeSpenders });\n    }\n\n    render() {\n        return (\n            <MinymalTheme>\n                <Questionnaire\n                    question={this.state.question}\n                    goals={this.state.goals}\n                    timeSpenders={this.state.timespenders}\n                    setQuestion={this.setQuestion}\n                    setGoals={this.setGoals}\n                    setTimeSpenders={this.setTimeSpenders}\n                />\n            </MinymalTheme>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}