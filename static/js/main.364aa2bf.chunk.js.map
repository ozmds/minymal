{"version":3,"sources":["piano.jpg","code.jpg","cooking.jpg","fitness.jpg","writing.jpg","other.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","typography","fontFamily","App","props","nextQuestion","questionName","setState","question","state","image_paths","Piano","Code","Cooking","Fitness","Writing","Other","image_titles","classes","this","ThemeProvider","Container","className","columnFlex","fullHeight","Typography","variant","Collapse","in","timeout","Button","onClick","color","marginTop","container","fillFlex","mountOnEnter","unmountOnExit","marginBottom","TextField","style","id","label","wrapper","wrapperInner","Grid","spacing","margin","padding","map","image","i","item","xs","Card","overlayCard","CardActionArea","CardMedia","title","overlay","Component","withStyles","display","flexDirection","justifyContent","width","height","maxWidth","maxHeight","objectFit","flex","position","backgroundColor","top","bottom","left","right","cursor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.364aa2bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/piano.99658986.jpg\";","module.exports = __webpack_public_path__ + \"static/media/code.1a1d09a1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cooking.f310620c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fitness.7505f50b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/writing.229f95be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/other.fdc3fd43.jpg\";","import React, { Component } from 'react';\nimport Piano from './piano.jpg';\nimport Code from './code.jpg';\nimport Cooking from './cooking.jpg';\nimport Fitness from './fitness.jpg';\nimport Writing from './writing.jpg';\nimport Other from './other.jpg';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport Collapse from '@material-ui/core/Collapse';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: '\"Playfair Display\", \"Helvetica\", \"Arial\", sans-serif',\n    }\n});\n\nconst styles = {\n    columnFlex: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    image: {\n        width: '100%',\n        height: '100%',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        objectFit: 'cover'\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    fillFlex: {\n        flex: '1'\n    },\n    overlay: {\n        position: 'absolute',\n        backgroundColor: 'rgba(0, 0, 0, 0.3)',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n        color: '#FFFFFF',\n        padding: '1rem'\n    },\n    overlayCard: {\n        position: 'relative',\n        cursor: 'pointer'\n    },\n    marginTop: {\n        marginTop: '1rem'\n    },\n    marginBottom: {\n        marginBottom: '1rem'\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: 'intro'\n        }\n    }\n\n    nextQuestion = (questionName) => {\n        this.setState({ question: questionName });\n    }\n\n    render() {\n        const image_paths = [Piano, Code, Cooking, Fitness, Writing, Other];\n        const image_titles = [\n            'Learn an Instrument', 'Build an App', 'Learn to Cook', 'Get Healthier', 'Write a Novel', 'Other Goals'\n        ];\n        const { classes } = this.props;\n        return (\n            <ThemeProvider theme={theme}>\n                <Container className={`${classes.columnFlex} ${classes.fullHeight}`}>\n                    <Container>\n                        <Typography variant='h2'>\n                            Minymal\n                        </Typography>\n                    </Container>\n                    <Collapse in={this.state.question === 'intro'} timeout={1500}>\n                        <Container>\n                            <Typography variant='body1'>\n                                Minimalist-minded planning for all goals, small and large.\n                            </Typography>\n                            <Button onClick={() => this.nextQuestion('goals')} variant='contained' color='primary' className={classes.marginTop}>\n                                Let's Get Started\n                            </Button>\n                        </Container>\n                    </Collapse>\n                    <Collapse \n                        in={this.state.question === 'name'}\n                        timeout={1500}\n                        classes={{\n                            container: classes.fillFlex\n                        }}\n                        mountOnEnter\n                        unmountOnExit\n                    >\n                        <Container>\n                            <Typography className={`${classes.marginBottom}`} variant=\"h5\">\n                                Let's get accquainted, what can I call you?\n                            </Typography>\n                            <TextField style={{'display': 'block'}} id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" />\n                            <Button onClick={() => this.nextQuestion('goals')} className={classes.marginTop} variant=\"contained\" color=\"primary\">\n                                Next\n                            </Button>\n                        </Container>\n                    </Collapse>\n                    <Collapse \n                        in={this.state.question === 'goals'} \n                        timeout={1500}\n                        classes={{\n                            container: classes.fillFlex,\n                            wrapper: classes.fullHeight,\n                            wrapperInner: classes.fullHeight\n                        }}\n                        mountOnEnter\n                        unmountOnExit\n                    >\n                        <Container className={`${classes.fullHeight} ${classes.columnFlex}`}>\n                            <Typography variant=\"h3\">\n                                What are your goals?\n                            </Typography>\n                            <Grid spacing={3} container style={{margin: '0rem', padding: '0.75rem'}} className={`${classes.fullHeight} ${classes.fillFlex}`}>\n                                {image_paths.map((image, i) => (\n                                    <Grid item xs={6}>\n                                        <Card className={`${classes.fullHeight} ${classes.overlayCard}`}>\n                                            <CardActionArea className={classes.fullHeight}>\n                                                <CardMedia\n                                                    image={image}\n                                                    title={image_titles[i]}\n                                                    className={classes.image}\n                                                />\n                                            </CardActionArea>\n                                            <div className={classes.overlay}>\n                                                <Typography variant=\"h4\">\n                                                    <strong>{image_titles[i]}</strong>\n                                                </Typography>\n                                            </div>\n                                        </Card>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </Container>\n                    </Collapse>\n                </Container>\n            </ThemeProvider>\n        )\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}