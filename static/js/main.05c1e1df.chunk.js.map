{"version":3,"sources":["static/other.jpg","static/writing.jpg","static/fitness.jpg","static/cooking.jpg","static/code.jpg","static/piano.jpg","components/Header.js","components/IntroQuestion.js","components/CardGoalsQuestion.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Container","Typography","variant","withStyles","button","marginTop","props","classes","Collapse","in","question","timeout","Button","onClick","color","className","imagePaths","Piano","Code","Cooking","Fitness","Writing","Other","imageTitles","CardGoalsQuestion","manageSelection","cardIndex","state","selected","includes","newState","index","indexOf","splice","setState","this","mountOnEnter","unmountOnExit","root","Grid","spacing","container","style","margin","padding","grid","map","image","i","key","item","xs","Card","card","CardActionArea","fullContainer","CardMedia","title","size","Component","display","flexDirection","justifyContent","height","width","objectFit","flex","fillContainer","overlay","position","top","bottom","left","right","backgroundColor","checkOverlay","cursor","wrapper","theme","createMuiTheme","typography","fontFamily","App","nextQuestion","questionName","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05c1e1df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/other.1667ad2c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/writing.1ca86e63.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fitness.375d4889.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cooking.7dab3c6d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/code.f00a03ae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/piano.eced221c.jpg\";","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nfunction Header() {\n    return (\n        <Container>\n            <Typography variant='h2'>{'Minymal'}</Typography>\n        </Container>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Collapse from '@material-ui/core/Collapse';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nconst styles = {\n    button: {\n        marginTop: '1rem'\n    }\n};\n\nfunction IntroQuestion(props) {\n    const { classes } = props;\n    return (\n        <Collapse in={props.question === 'intro'} timeout={1500}>\n            <Container>\n                <Typography variant='body1'>\n                    {'Minimalist-minded planning for all goals, small and large.'}\n                </Typography>\n                <Button\n                    onClick={() => props.onClick('goals')}\n                    variant='contained'\n                    color='primary'\n                    className={classes.button}\n                >\n                    {\"Let's Get Started\"}\n                </Button>\n            </Container>\n        </Collapse>\n    );\n}\n\nIntroQuestion.propTypes = {\n    question: PropTypes.string,\n    onClick: PropTypes.func,\n    classes: PropTypes.object\n};\n\nexport default withStyles(styles)(IntroQuestion);\n","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport Button from '@material-ui/core/Button';\nimport Collapse from '@material-ui/core/Collapse';\nimport { withStyles } from '@material-ui/core/styles';\nimport Slide from '@material-ui/core/Slide';\nimport PropTypes from 'prop-types';\nimport Other from '../static/other.jpg';\nimport Writing from '../static/writing.jpg';\nimport Fitness from '../static/fitness.jpg';\nimport Cooking from '../static/cooking.jpg';\nimport Code from '../static/code.jpg';\nimport Piano from '../static/piano.jpg';\n\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '80vh',\n        marginTop: '2rem'\n    },\n    image: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n    },\n    grid: {\n        height: '100%',\n        flex: '1'\n    },\n    fullContainer: {\n        height: '100%'\n    },\n    fillContainer: {\n        flex: '1',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    overlay: {\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n        backgroundColor: 'rgba(0, 0, 0, 0.3)',\n        color: '#FFFFFF',\n        padding: '1rem'\n    },\n    checkOverlay: {\n        width: '100%',\n        height: '100%'\n    },\n    card: {\n        position: 'relative',\n        cursor: 'pointer',\n        height: '100%'\n    },\n    wrapper: {\n        height: '80%'\n    }\n};\n\nconst imagePaths = [Piano, Code, Cooking, Fitness, Writing, Other];\nconst imageTitles = [\n    'Learn an Instrument',\n    'Build an App',\n    'Learn to Cook',\n    'Get Healthier',\n    'Write a Novel',\n    'Other Goals'\n];\n\nclass CardGoalsQuestion extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: []\n        };\n    }\n\n    manageSelection = (cardIndex) => {\n        if (!this.state.selected.includes(cardIndex)) {\n            this.setState({ selected: [...this.state.selected, cardIndex] });\n        } else {\n            const newState = [...this.state.selected];\n            const index = newState.indexOf(cardIndex);\n            newState.splice(index, 1);\n            this.setState({ selected: newState });\n        }\n    };\n    /*\n    <CardActionArea\n                                        className={classes.fullContainer}\n                                        onClick={() => this.manageSelection(i)}\n                                    >\n                                        <CardMedia\n                                            image={image}\n                                            title={imageTitles[i]}\n                                            className={classes.image}\n                                        />\n                                    </CardActionArea>\n                                    <Slide mountOnEnter unmountOnExit in={!this.state.selected.includes(i)} timeout={{ enter: 0, exit: 1500 }}>\n                                        <Container className={classes.overlay}>\n                                            <Typography variant='h4'>\n                                                <strong>{imageTitles[i]}</strong>\n                                            </Typography>\n                                        </Container>\n                                    </Slide>\n                                    <Slide mountOnEnter unmountOnExit in={this.state.selected.includes(i)} timeout={1500}>\n                                        <Container className={classes.overlay}>\n                                            <CheckBoxIcon className={classes.checkOverlay} />\n                                        </Container>\n                                    </Slide>\n    */\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Collapse\n                in={this.props.question === 'goals'}\n                timeout={1500}\n                mountOnEnter\n                unmountOnExit\n            >\n                <Container className={classes.root}>\n                    <Typography variant='h4'>{'What are your goals?'}</Typography>\n                    <Grid\n                        spacing={3}\n                        container\n                        style={{ margin: '0rem', padding: '0.75rem' }}\n                        className={classes.grid}\n                    >\n                        {imagePaths.map((image, i) => (\n                            <Grid key={imageTitles[i]} item xs={6}>\n                                <Card className={classes.card}>\n                                    <CardActionArea\n                                        className={classes.fullContainer}\n                                    >\n                                        <CardMedia\n                                            image={image}\n                                            title={imageTitles[i]}\n                                            className={classes.image}\n                                        />\n                                    </CardActionArea>\n                                </Card>\n                            </Grid>\n                        ))}\n                    </Grid>\n                    <Button\n                        onClick={() => this.props.onClick('name')}\n                        className={classes.button}\n                        variant='contained'\n                        color='primary'\n                        size='large'\n                    >\n                        {'Next'}\n                    </Button>\n                </Container>\n            </Collapse>\n        );\n    }\n}\n\nCardGoalsQuestion.propTypes = {\n    question: PropTypes.string,\n    onClick: PropTypes.func,\n    classes: PropTypes.object\n};\n\nexport default withStyles(styles)(CardGoalsQuestion);\n","import React, { Component } from 'react';\nimport Container from '@material-ui/core/Container';\nimport { withStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nimport Header from './Header';\nimport IntroQuestion from './IntroQuestion';\nimport CardGoalsQuestion from './CardGoalsQuestion';\n\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: '\"Playfair Display\", \"Helvetica\", \"Arial\", sans-serif'\n    }\n});\n\nconst styles = {\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%'\n    }\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: 'intro'\n        };\n    }\n\n    nextQuestion = (questionName) => {\n        this.setState({ question: questionName });\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <ThemeProvider theme={theme}>\n                <Container className={classes.container}>\n                    <Header />\n                    <IntroQuestion\n                        question={this.state.question}\n                        onClick={this.nextQuestion}\n                    />\n                    <CardGoalsQuestion\n                        question={this.state.question}\n                        onClick={this.nextQuestion}\n                    />\n                </Container>\n            </ThemeProvider>\n        );\n    }\n}\n\nApp.propTypes = {\n    classes: PropTypes.object\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}